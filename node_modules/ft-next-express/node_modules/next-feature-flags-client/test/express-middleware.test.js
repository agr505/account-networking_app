/*global describe, it, before, after*/
/*jshint expr:true, node:true*/
'use strict';


require('es6-promise').polyfill();
require('isomorphic-fetch');
var request = require('supertest');
var app;
var fetchMock = require('fetch-mock');
var expect = require('chai').expect;

var defaultFlags = {
	"contextNavigation": false,
	"video": true,
	"longExpired": false,
	"recentlyExpired": false
};
var overriddenFlags = {
	"contextNavigation": true,
	"video": false,
	"longExpired": false,
	"recentlyExpired": false
};

describe('Express Middleware', function() {

	before(function() {
		fetchMock.registerRoute({
			name: 'flags',
			matcher: 'http://host.com/path.json',
			response: require('./fixtures/some-flags.js')
		});
		fetchMock.mock();
		app = require('./fixtures/express/app');
	});

	after(function() {
		fetchMock.restore();
		fetchMock.unregisterRoute();
	});

	it('expose flags via `res.locals.flags` with appropriate vary header', function(done) {
		app.initializePromise.then(function() {
			request(app)
				.get('/path.json')
				.expect('Vary', /X-Flags/)
				.expect(200, defaultFlags, done);
		});
	});

	it('expose flags Array via `res.locals.flagsArray`', function(done) {
		app.initializePromise.then(function() {
			request(app)
				.get('/array.json')
				.expect('Vary', /X-Flags/)
				.expect(200, function (err, res) {
					var json = JSON.parse(res.text);
					expect(json instanceof Array).to.be.true;
					expect(json[0].name).to.exist;
					expect(json[0].state).to.exist;
					expect(json[0].expiry).to.exist;
					done();
				});
		});
	});

	it('enables flags to be overriden by X-Flags header', function(done) {
		app.initializePromise.then(function() {
			request(app)
				.get('/path.json')
				.set({ 'X-Flags': "contextNavigation:on,video:off" })
				.expect('Vary', /X-Flags/)
				.expect(200, overriddenFlags, done);
		});
	});

	it('enables flags should be overridden by Cookie if not production', function(done) {
		app.initializePromise.then(function() {
			request(app)
				.get('/path.json')
				.set({ 'X-Flags': "contextNavigation:on,video:off" })
				.expect('Vary', /X-Flags/)
				.expect(200, overriddenFlags, done);
		});
	});

	it('enables flags should not be overridden by Cookie if production', function(done) {
		app.initializePromise.then(function() {
			process.env.NODE_ENV = 'production';
			request(app)
				.get('/path.json')
				.set({ 'Cookie': "next-flags=contextNavigation:on,video:off" })
				.expect('Vary', /X-Flags/)
				.expect(200, defaultFlags, done);
		});
	});

	it('is good to go', function(done) {
		request(app)
			.get('/__gtg')
			.expect(200, done);
	});
});
