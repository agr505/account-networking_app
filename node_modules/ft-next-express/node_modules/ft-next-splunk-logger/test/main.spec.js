'use strict';
/*global describe, it, beforeEach, afterEach*/

process.env.SPLUNK_URL = 'http://localhost:6666';
var expect = require('chai').expect;

var http = require('http');
var sinon = require('sinon');

describe('Splunk Logger', function(){

	var server;
	var promise;

	var appName = 'splunk-logger-test';
	var logger;

	beforeEach(function(){
		var requestData = '';
		promise = new Promise(function(resolve){
			server = http.createServer(function(req, res){
				req.on('data', function(chunk) {
					requestData += chunk.toString();
				});
				req.on('end', function(){
					resolve(requestData);
				});
			});
			server.listen(6666);
		});
	});

	afterEach(function(){
		if(server && server.close){
			server.close();
		}
		Object.keys(require.cache).forEach(function(key){
			if(key.indexOf('/src/main.js') > -1){
				console.log('deleting %s', key);
				delete require.cache[key];
			}
		});
	});

	it('Should create a new named instance', function(){
		logger = require('../src/main');
		var log = logger(appName);
		expect(log).to.be.a('function');
	});

	it('Should pass formatted messages to the agent', function(done){
		logger = require('../src/main');
		var log = logger(appName);
		var logData = {foo:'bar'};
		promise.then(function(data){
			expect(data).to.contain('foo=bar');
			done();
		}).catch(done);
		log(logData);
	});

	it('Should insert the log name into the log', function(done){
		logger = require('../src/main');
		var log = logger(appName);
		var logData = {foo:'bar'};
		promise.then(function(data){
			expect(data).to.contain(appName);
			done();
		}).catch(done);
		log(logData);
	});

	it('Should not log if splunk_url is "nolog"', function(done){
		process.env.SPLUNK_URL = 'NOLOG';
		logger = require('../src/main');
		var logData = {foo:'bar'};
		var log = logger(appName);
		promise.then(function(data){
			clearTimeout(timeout);
			done(new Error('Should not have been called'));
		}).catch(done);
		log(logData);
		var timeout = setTimeout(done, 250);
	});

	it('Should log to the console if splunk_url is "debug"', function(){
		var stubConsole = {log:sinon.spy()};
		process.env.SPLUNK_URL = 'DEBUG';
		logger = require('../src/main');
		var log = logger(appName, stubConsole);
		var logData = {foo:'bar'};
		log(logData);
		sinon.assert.called(stubConsole.log);
	});

	it('Should fallback to debug mode if splunk_url is missing', function(){
		var stubConsole = {log:sinon.spy()};
		delete process.env.SPLUNK_URL;
		logger = require('../src/main');
		var log = logger(appName, stubConsole);
		var logData = {foo:'bar'};
		log(logData);
		sinon.assert.called(stubConsole.log);
	});
});
