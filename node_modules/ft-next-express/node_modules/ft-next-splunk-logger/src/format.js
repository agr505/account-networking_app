'use strict';
var debug = require('debug')('ft-next-splunk-logger');


function formatString(args){
	var str = args[0];
	var data = args.slice(1);
	var index = 0;
	return str.replace(/(%s|%d|%j|%o)/g, function(str, p1){
		var item = data[index];
		index++;
		switch(p1){
			case '%s': return String(item);
			case '%d': return Number(item);
			case '%j': return JSON.stringify(item);
			case '%o': return formatObject(item);
		}
	});
}

function toString(value){
	if(typeof value === 'function'){
		return null;
	}

	if(typeof value === 'object'){
		try{
			return JSON.stringify(value);
		}catch(e){
			return null;
		}
	}

	return String(value);
}

function formatObjectValue(value){
	if(value === null){
		return null;
	}

	value = value.replace(/=/g, ' ');
	if(/\s/g.test(value)){
		value = '"' + value.replace(/"/g, "'") + '"';
	}

	return value;
}

function formatObject(obj){
	if(typeof obj !== 'object' || obj === null){
		return String(obj);
	}

	var strParts = [];
	Object.keys(obj).forEach(function(key){
		var value = formatObjectValue(toString(obj[key]));
		debug('key=%s value=%s', key, value);
		if(value !== null){
			strParts.push(key + '=' + value);
		}
	});

	return strParts.join(' ');
}

function format(args){
	if(typeof args[0] === 'string'){
		return formatString(args);
	}

	if(typeof args[0] === 'object'){
		return formatObject(args[0]);
	}
}

module.exports = format;
